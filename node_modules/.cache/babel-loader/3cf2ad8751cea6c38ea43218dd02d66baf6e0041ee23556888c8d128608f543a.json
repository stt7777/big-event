{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// 基于axios封装网络请求的函数\nimport axios from 'axios';\nimport store from '@/store/index.js';\nimport router from '@/router/index.js';\nimport { Message } from 'element-ui';\nexport const baseURL = 'http://big-event-vue-api-t.itheima.net';\nconst myAxios = axios.create({\n  baseURL: baseURL\n});\n// 定义请求拦截器\n// 每次调用request都会先走这个请求拦截器\nmyAxios.interceptors.request.use(function (config) {\n  // 在请求前会触发一次\n  // 返回给axios内源码，\n  // config配置对象（要请求后台的参数都在这个对象上），根据配置项发起请求\n  if (store.state.token) {\n    config.headers.Authorization = store.state.token;\n  }\n  return config;\n}, function (error) {\n  // 发起请求的代码，如果有异常就会进入到这里\n  // 返回一个拒绝状态的Promise对象\n  return Promise.reject(error);\n});\n// 定义响应拦截器\nmyAxios.interceptors.response.use(function (response) {\n  // 响应状态码为 2xx 时触发成功的回调，形参中的 response 是“成功的结果”\n  return response;\n}, function (error) {\n  // 响应状态码不是 2xx 时触发失败的回调，形参中的 error 是“失败的结果”\n  if (error.response.status === 401) {\n    // 身份验证过期，清除vuex里的一切，回到登录页面\n    store.commit('updateToken', '');\n    store.commit('updateUserInfo', {});\n    router.push('/login');\n    Message.error('用户身份已过期');\n  }\n  return Promise.reject(error);\n});\nexport default myAxios;","map":{"version":3,"names":["axios","store","router","Message","baseURL","myAxios","create","interceptors","request","use","config","state","token","headers","Authorization","error","Promise","reject","response","status","commit","push"],"sources":["D:/web ziliao/大事件项目/vue-event/src/utils/request.js"],"sourcesContent":["// 基于axios封装网络请求的函数\r\nimport axios from 'axios'\r\nimport store from '@/store/index.js'\r\nimport router from '@/router/index.js'\r\nimport { Message } from 'element-ui'\r\nexport const baseURL = 'http://big-event-vue-api-t.itheima.net'\r\nconst myAxios = axios.create({\r\n  baseURL: baseURL\r\n})\r\n// 定义请求拦截器\r\n// 每次调用request都会先走这个请求拦截器\r\nmyAxios.interceptors.request.use(function (config) {\r\n  // 在请求前会触发一次\r\n  // 返回给axios内源码，\r\n  // config配置对象（要请求后台的参数都在这个对象上），根据配置项发起请求\r\n  if (store.state.token) {\r\n    config.headers.Authorization = store.state.token\r\n  }\r\n\r\n  return config\r\n}, function (error) {\r\n  // 发起请求的代码，如果有异常就会进入到这里\r\n  // 返回一个拒绝状态的Promise对象\r\n  return Promise.reject(error)\r\n})\r\n// 定义响应拦截器\r\nmyAxios.interceptors.response.use(function (response) {\r\n  // 响应状态码为 2xx 时触发成功的回调，形参中的 response 是“成功的结果”\r\n  return response\r\n}, function (error) {\r\n  // 响应状态码不是 2xx 时触发失败的回调，形参中的 error 是“失败的结果”\r\n  if (error.response.status === 401) {\r\n    // 身份验证过期，清除vuex里的一切，回到登录页面\r\n    store.commit('updateToken', '')\r\n    store.commit('updateUserInfo', {})\r\n\r\n    router.push('/login')\r\n    Message.error('用户身份已过期')\r\n  }\r\n  return Promise.reject(error)\r\n})\r\nexport default myAxios\r\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,kBAAkB;AACpC,OAAOC,MAAM,MAAM,mBAAmB;AACtC,SAASC,OAAO,QAAQ,YAAY;AACpC,OAAO,MAAMC,OAAO,GAAG,wCAAwC;AAC/D,MAAMC,OAAO,GAAGL,KAAK,CAACM,MAAM,CAAC;EAC3BF,OAAO,EAAEA;AACX,CAAC,CAAC;AACF;AACA;AACAC,OAAO,CAACE,YAAY,CAACC,OAAO,CAACC,GAAG,CAAC,UAAUC,MAAM,EAAE;EACjD;EACA;EACA;EACA,IAAIT,KAAK,CAACU,KAAK,CAACC,KAAK,EAAE;IACrBF,MAAM,CAACG,OAAO,CAACC,aAAa,GAAGb,KAAK,CAACU,KAAK,CAACC,KAAK;EAClD;EAEA,OAAOF,MAAM;AACf,CAAC,EAAE,UAAUK,KAAK,EAAE;EAClB;EACA;EACA,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CAAC,CAAC;AACF;AACAV,OAAO,CAACE,YAAY,CAACW,QAAQ,CAACT,GAAG,CAAC,UAAUS,QAAQ,EAAE;EACpD;EACA,OAAOA,QAAQ;AACjB,CAAC,EAAE,UAAUH,KAAK,EAAE;EAClB;EACA,IAAIA,KAAK,CAACG,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;IACjC;IACAlB,KAAK,CAACmB,MAAM,CAAC,aAAa,EAAE,EAAE,CAAC;IAC/BnB,KAAK,CAACmB,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;IAElClB,MAAM,CAACmB,IAAI,CAAC,QAAQ,CAAC;IACrBlB,OAAO,CAACY,KAAK,CAAC,SAAS,CAAC;EAC1B;EACA,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CAAC,CAAC;AACF,eAAeV,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}