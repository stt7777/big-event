{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as echarts from 'echarts';\nexport default {\n  name: 'my-home',\n  mounted() {\n    this.setCurveChartFn();\n  },\n  methods: {\n    setCurveChartFn() {\n      // 基于准备好的dom，初始化echarts实例\n      const curveChart = echarts.init(document.getElementById('curve_show'));\n      // 绘制面积图表\n      // 数据源(模拟后台返回的数据)\n      const aListAll = [{\n        count: 36,\n        date: '2019-04-13'\n      }, {\n        count: 52,\n        date: '2019-04-14'\n      }, {\n        count: 78,\n        date: '2019-04-15'\n      }, {\n        count: 85,\n        date: '2019-04-16'\n      }, {\n        count: 65,\n        date: '2019-04-17'\n      }, {\n        count: 72,\n        date: '2019-04-18'\n      }, {\n        count: 88,\n        date: '2019-04-19'\n      }, {\n        count: 64,\n        date: '2019-04-20'\n      }, {\n        count: 72,\n        date: '2019-04-21'\n      }, {\n        count: 90,\n        date: '2019-04-22'\n      }, {\n        count: 96,\n        date: '2019-04-23'\n      }, {\n        count: 100,\n        date: '2019-04-24'\n      }, {\n        count: 102,\n        date: '2019-04-25'\n      }, {\n        count: 110,\n        date: '2019-04-26'\n      }, {\n        count: 123,\n        date: '2019-04-27'\n      }, {\n        count: 100,\n        date: '2019-04-28'\n      }, {\n        count: 132,\n        date: '2019-04-29'\n      }, {\n        count: 146,\n        date: '2019-04-30'\n      }, {\n        count: 200,\n        date: '2019-05-01'\n      }, {\n        count: 180,\n        date: '2019-05-02'\n      }, {\n        count: 163,\n        date: '2019-05-03'\n      }, {\n        count: 110,\n        date: '2019-05-04'\n      }, {\n        count: 80,\n        date: '2019-05-05'\n      }, {\n        count: 82,\n        date: '2019-05-06'\n      }, {\n        count: 70,\n        date: '2019-05-07'\n      }, {\n        count: 65,\n        date: '2019-05-08'\n      }, {\n        count: 54,\n        date: '2019-05-09'\n      }, {\n        count: 40,\n        date: '2019-05-10'\n      }, {\n        count: 45,\n        date: '2019-05-11'\n      }, {\n        count: 38,\n        date: '2019-05-12'\n      }];\n\n      // 但是图标要求直接给数字的值, 所以要把对象的值取出来形成2个只有值的数组\n      const aCount = [];\n      const aDate = [];\n      for (let i = 0; i < aListAll.length; i++) {\n        aCount.push(aListAll[i].count);\n        aDate.push(aListAll[i].date);\n      }\n\n      // 面积图的echarts配置项(参考文档复制)\n      const chartopt = {\n        title: {\n          text: '月新增文章数',\n          // 标题\n          left: 'center',\n          // 位置居中\n          top: '10' // 标题距离容器顶部px\n        },\n\n        tooltip: {\n          // 提示框组件\n          trigger: 'axis' // 坐标轴触发(鼠标放在坐标轴就能出提示框)\n        },\n\n        legend: {\n          // 图例组件(每种颜色的意思)\n          data: ['新增文章'],\n          // 图例文字解释(要和series里name对应)\n          top: '40' // 距离容器顶部px\n        },\n\n        toolbox: {\n          // 工具栏\n          show: true,\n          // 要显示\n          feature: {\n            // 各工具配置项\n            mark: {\n              show: true\n            },\n            // 辅助线开关\n            dataView: {\n              show: true,\n              readOnly: false\n            },\n            // 数据视图工具，可以展现当前图表所用的数据，编辑后可以动态更新。\n            magicType: {\n              show: true,\n              type: ['line', 'bar']\n            },\n            // 动态类型切换\n            restore: {\n              show: true\n            },\n            // 配置项还原\n            saveAsImage: {\n              show: true\n            } // 点击保存下载图片\n          }\n        },\n\n        xAxis: [\n        // 水平轴显示\n        {\n          name: '日',\n          type: 'category',\n          boundaryGap: false,\n          // 坐标轴两边留白策略 (不留白)\n          data: aDate // 水平轴上的数字数据 (时间)\n        }],\n\n        yAxis: [\n        // 垂直轴显示\n        {\n          name: '月新增文章数',\n          type: 'value' // 以series里的data值做划分段\n        }],\n\n        series: [\n        // 系列(控制图表类型和数据)\n        {\n          name: '新增文章',\n          type: 'line',\n          // 折线图\n          smooth: true,\n          // 是否平滑视觉引导线，默认不平滑，可以设置成 true 平滑显示\n          areaStyle: {\n            type: 'default'\n          },\n          // 区域填充样式。设置后显示成区域面积图。\n          itemStyle: {\n            color: '#f80',\n            lineStyle: {\n              color: '#f80'\n            }\n          },\n          // 折线拐点标志的样式。\n          data: aCount // 真正数据源(用下标和x轴数组对应)\n        }],\n\n        grid: {\n          // 直角坐标系内绘图网格\n          show: true,\n          x: 50,\n          // grid 组件离容器偏移量, 左侧\n          x2: 50,\n          // 右侧\n          y: 80,\n          // 上\n          height: 220 // 高度\n        }\n      };\n\n      curveChart.setOption(chartopt);\n    }\n  }\n};","map":{"version":3,"names":["echarts","name","mounted","setCurveChartFn","methods","curveChart","init","document","getElementById","aListAll","count","date","aCount","aDate","i","length","push","chartopt","title","text","left","top","tooltip","trigger","legend","data","toolbox","show","feature","mark","dataView","readOnly","magicType","type","restore","saveAsImage","xAxis","boundaryGap","yAxis","series","smooth","areaStyle","itemStyle","color","lineStyle","grid","x","x2","y","height","setOption"],"sources":["src/views/home/index.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div class=\"container-fluid\">\r\n      <el-row class=\"spannel_list\" :gutter=\"10\">\r\n        <el-col :sm=\"6\" :xs=\"12\">\r\n          <div class=\"spannel\">\r\n            <em>10015</em><span>篇</span>\r\n            <b>总文章数</b>\r\n          </div>\r\n        </el-col>\r\n        <el-col :sm=\"6\" :xs=\"12\">\r\n          <div class=\"spannel scolor01\">\r\n            <em>123</em><span>篇</span>\r\n            <b>日新增文章数</b>\r\n          </div>\r\n        </el-col>\r\n        <el-col :sm=\"6\" :xs=\"12\">\r\n          <div class=\"spannel scolor02\">\r\n            <em>35</em><span>条</span>\r\n            <b>评论总数</b>\r\n          </div>\r\n        </el-col>\r\n        <el-col :sm=\"6\" :xs=\"12\">\r\n          <div class=\"spannel scolor03\">\r\n            <em>123</em><span>条</span>\r\n            <b>日新增评论数</b>\r\n          </div>\r\n        </el-col>\r\n      </el-row>\r\n    </div>\r\n\r\n    <div class=\"container-fluid\">\r\n      <el-row class=\"curve-pie\" :gutter=\"10\">\r\n        <el-col :sm=\"16\" :xs=\"16\">\r\n          <div class=\"gragh_pannel\" id=\"curve_show\"></div>\r\n        </el-col>\r\n        <el-col :sm=\"8\" :xs=\"8\">\r\n          <div class=\"gragh_pannel\" id=\"pie_show\"></div>\r\n        </el-col>\r\n      </el-row>\r\n    </div>\r\n\r\n    <div class=\"container-fluid\">\r\n      <div class=\"column_pannel\" id=\"column_show\"></div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as echarts from 'echarts'\r\n\r\nexport default {\r\n  name: 'my-home',\r\n  mounted () {\r\n    this.setCurveChartFn()\r\n  },\r\n  methods: {\r\n    setCurveChartFn () {\r\n      // 基于准备好的dom，初始化echarts实例\r\n      const curveChart = echarts.init(document.getElementById('curve_show'))\r\n      // 绘制面积图表\r\n      // 数据源(模拟后台返回的数据)\r\n      const aListAll = [\r\n        { count: 36, date: '2019-04-13' },\r\n        { count: 52, date: '2019-04-14' },\r\n        { count: 78, date: '2019-04-15' },\r\n        { count: 85, date: '2019-04-16' },\r\n        { count: 65, date: '2019-04-17' },\r\n        { count: 72, date: '2019-04-18' },\r\n        { count: 88, date: '2019-04-19' },\r\n        { count: 64, date: '2019-04-20' },\r\n        { count: 72, date: '2019-04-21' },\r\n        { count: 90, date: '2019-04-22' },\r\n        { count: 96, date: '2019-04-23' },\r\n        { count: 100, date: '2019-04-24' },\r\n        { count: 102, date: '2019-04-25' },\r\n        { count: 110, date: '2019-04-26' },\r\n        { count: 123, date: '2019-04-27' },\r\n        { count: 100, date: '2019-04-28' },\r\n        { count: 132, date: '2019-04-29' },\r\n        { count: 146, date: '2019-04-30' },\r\n        { count: 200, date: '2019-05-01' },\r\n        { count: 180, date: '2019-05-02' },\r\n        { count: 163, date: '2019-05-03' },\r\n        { count: 110, date: '2019-05-04' },\r\n        { count: 80, date: '2019-05-05' },\r\n        { count: 82, date: '2019-05-06' },\r\n        { count: 70, date: '2019-05-07' },\r\n        { count: 65, date: '2019-05-08' },\r\n        { count: 54, date: '2019-05-09' },\r\n        { count: 40, date: '2019-05-10' },\r\n        { count: 45, date: '2019-05-11' },\r\n        { count: 38, date: '2019-05-12' }\r\n      ]\r\n\r\n      // 但是图标要求直接给数字的值, 所以要把对象的值取出来形成2个只有值的数组\r\n      const aCount = []\r\n      const aDate = []\r\n\r\n      for (let i = 0; i < aListAll.length; i++) {\r\n        aCount.push(aListAll[i].count)\r\n        aDate.push(aListAll[i].date)\r\n      }\r\n\r\n      // 面积图的echarts配置项(参考文档复制)\r\n      const chartopt = {\r\n        title: {\r\n          text: '月新增文章数', // 标题\r\n          left: 'center', // 位置居中\r\n          top: '10' // 标题距离容器顶部px\r\n        },\r\n        tooltip: { // 提示框组件\r\n          trigger: 'axis' // 坐标轴触发(鼠标放在坐标轴就能出提示框)\r\n        },\r\n        legend: { // 图例组件(每种颜色的意思)\r\n          data: ['新增文章'], // 图例文字解释(要和series里name对应)\r\n          top: '40' // 距离容器顶部px\r\n        },\r\n        toolbox: { // 工具栏\r\n          show: true, // 要显示\r\n          feature: { // 各工具配置项\r\n            mark: { show: true }, // 辅助线开关\r\n            dataView: { show: true, readOnly: false }, // 数据视图工具，可以展现当前图表所用的数据，编辑后可以动态更新。\r\n            magicType: { show: true, type: ['line', 'bar'] }, // 动态类型切换\r\n            restore: { show: true }, // 配置项还原\r\n            saveAsImage: { show: true } // 点击保存下载图片\r\n          }\r\n        },\r\n        xAxis: [ // 水平轴显示\r\n          {\r\n            name: '日',\r\n            type: 'category',\r\n            boundaryGap: false, // 坐标轴两边留白策略 (不留白)\r\n            data: aDate // 水平轴上的数字数据 (时间)\r\n          }\r\n        ],\r\n        yAxis: [ // 垂直轴显示\r\n          {\r\n            name: '月新增文章数',\r\n            type: 'value' // 以series里的data值做划分段\r\n          }\r\n        ],\r\n        series: [ // 系列(控制图表类型和数据)\r\n          {\r\n            name: '新增文章',\r\n            type: 'line', // 折线图\r\n            smooth: true, // 是否平滑视觉引导线，默认不平滑，可以设置成 true 平滑显示\r\n            areaStyle: { type: 'default' }, // 区域填充样式。设置后显示成区域面积图。\r\n            itemStyle: { color: '#f80', lineStyle: { color: '#f80' } }, // 折线拐点标志的样式。\r\n            data: aCount // 真正数据源(用下标和x轴数组对应)\r\n          }\r\n        ],\r\n        grid: { // 直角坐标系内绘图网格\r\n          show: true,\r\n          x: 50, // grid 组件离容器偏移量, 左侧\r\n          x2: 50, // 右侧\r\n          y: 80, // 上\r\n          height: 220 // 高度\r\n        }\r\n      }\r\n\r\n      curveChart.setOption(chartopt)\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.spannel_list {\r\n  margin-top: 20px;\r\n}\r\n\r\n.spannel {\r\n  height: 100px;\r\n  overflow: hidden;\r\n  text-align: center;\r\n  position: relative;\r\n  background-color: #fff;\r\n  border: 1px solid #e7e7e9;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.spannel em {\r\n  font-style: normal;\r\n  font-size: 50px;\r\n  line-height: 50px;\r\n  display: inline-block;\r\n  margin: 10px 0 0 20px;\r\n  font-family: 'Arial';\r\n  color: #83a2ed;\r\n}\r\n\r\n.spannel span {\r\n  font-size: 14px;\r\n  display: inline-block;\r\n  color: #83a2ed;\r\n  margin-left: 10px;\r\n}\r\n\r\n.spannel b {\r\n  position: absolute;\r\n  left: 0;\r\n  bottom: 0;\r\n  width: 100%;\r\n  line-height: 24px;\r\n  background: #e5e5e5;\r\n  color: #333;\r\n  font-size: 14px;\r\n  font-weight: normal;\r\n}\r\n\r\n.scolor01 em,\r\n.scolor01 span {\r\n  color: #6ac6e2;\r\n}\r\n\r\n.scolor02 em,\r\n.scolor02 span {\r\n  color: #5fd9de;\r\n}\r\n\r\n.scolor03 em,\r\n.scolor03 span {\r\n  color: #58d88e;\r\n}\r\n\r\n.gragh_pannel {\r\n  height: 350px;\r\n  border: 1px solid #e7e7e9;\r\n  background-color: #fff !important;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.column_pannel {\r\n  margin-bottom: 20px;\r\n  height: 400px;\r\n  border: 1px solid #e7e7e9;\r\n  background-color: #fff !important;\r\n}\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}