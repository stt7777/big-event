{"ast":null,"code":"import { getArtCateListAPI, uploadArticleAPI, getArtListAPI } from '@/api';\nimport imgObj from '../../assets/images/cover.jpg';\nexport default {\n  name: 'ArtList',\n  data() {\n    return {\n      state: '',\n      // 值只能为已发布或者草稿\n      cateList: [],\n      // 用来接收返回的文章分类列表\n      artList: [],\n      // 用来接收返回的文章列表\n      total: 0,\n      // 保存现有文章的总数\n      // 查询参数对象\n      q: {\n        pagenum: 1,\n        // 请求的页数\n        pagesize: 10,\n        // 每页的文章数量\n        cate_id: '',\n        state: ''\n      },\n      pubDialogVisible: false,\n      // 控制发布文章对话框的出现/隐藏\n      pubForm: {\n        // 发布文章-表单的数据对象\n        title: '',\n        cate_id: '',\n        content: '',\n        // 保存文章内容\n        cover_img: null // 用户选择的封面图片（null 表示没有选择任何封面）\n      },\n\n      pubFormRules: {\n        // 发布文章-表单的验证规则对象\n        title: [{\n          required: true,\n          message: '请输入文章标题',\n          trigger: 'blur'\n        }, {\n          min: 1,\n          max: 30,\n          message: '文章标题的长度为1-30个字符',\n          trigger: 'blur'\n        }],\n        cate_id: [{\n          required: true,\n          message: '请选择文章标题',\n          trigger: 'change'\n        }],\n        content: [{\n          required: true,\n          message: '请输入文章内容',\n          trigger: 'blur'\n        }],\n        cover_img: [{\n          required: true,\n          message: '请选择文章封面',\n          trigger: 'change'\n        }]\n      }\n    };\n  },\n  created() {\n    this.getCateListfn();\n    this.getArticleListFn();\n  },\n  methods: {\n    // 发布文章的对话框,关闭前的回调\n    async handleClose(done) {\n      // done的作用：调用就会关闭对话框\n      const confirmResult = await this.$confirm('此操作将导致文章信息丢失, 是否继续?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).catch(err => err);\n      // 取消了关闭-阻止住, 什么都不干\n      if (confirmResult === 'cancel') return;\n      // 确认关闭\n      done();\n    },\n    // 展示发布文章的对话框\n    showPubDialogFn() {\n      this.pubDialogVisible = true;\n    },\n    // 得到文章分类列表\n    async getCateListfn() {\n      const {\n        data: res\n      } = await getArtCateListAPI();\n      this.cateList = res.data;\n      // console.log(res)\n    },\n\n    // 选择封面点击事件，出现文件选择框\n    selCoverFn() {\n      this.$refs.iptFileRef.click();\n    },\n    // 前端预览用户选择的头像文件\n    changeCoverFn(e) {\n      const files = e.target.files;\n      if (files.length === 0) {\n        // 用户没有选择封面\n        this.pubForm.cover_img = null;\n        this.$refs.imgRef.setAttribute('src', imgObj);\n      } else {\n        // 用户选择了封面\n        this.pubForm.cover_img = files[0];\n        const url = URL.createObjectURL(files[0]);\n        this.$refs.imgRef.setAttribute('src', url);\n      }\n      this.$refs.pubFormRef.validateField('cover_img');\n    },\n    // 新增文章后，对话框关闭后清空表单\n    dialogCloseFn() {\n      this.$refs.pubFormRef.resetFields();\n      // 给封面标签img重新设置一个值，因为没有受到v-model的影响\n      this.$refs.imgRef.setAttribute('src', imgObj);\n    },\n    // 表单里点击按钮事件，点击发布或存为草稿，准备调用后端接口\n    pubArticleFn(str) {\n      // str的值为已发布或草稿\n      this.pubForm.state = str;\n      // console.log(this.pubForm)\n      // 兜底校验\n      this.$refs.pubFormRef.validate(async valid => {\n        if (valid) {\n          // 校验通过\n          const fd = new FormData();\n          fd.append('title', this.pubForm.title);\n          fd.append('cate_id', this.pubForm.cate_id);\n          fd.append('content', this.pubForm.content);\n          fd.append('cover_img', this.pubForm.cover_img);\n          fd.append('state', this.pubForm.state);\n          const {\n            data: res\n          } = await uploadArticleAPI(fd);\n          if (res.code !== 0) return this.$message.error('发布文章失败');\n          this.$message.success('发布文章成功');\n          // 关闭对话框\n          this.pubDialogVisible = false;\n          this.getArticleListFn();\n        } else {\n          return false;\n        }\n      });\n    },\n    // 富文本编辑器内容改变触发此事件方法\n    contentChangeFn() {\n      this.$refs.pubFormRef.validateField('content');\n    },\n    // 获取文章列表\n    async getArticleListFn() {\n      const {\n        data: res\n      } = await getArtListAPI(this.q);\n      this.artList = res.data;\n      this.total = res.total;\n    }\n  }\n};","map":{"version":3,"names":["getArtCateListAPI","uploadArticleAPI","getArtListAPI","imgObj","name","data","state","cateList","artList","total","q","pagenum","pagesize","cate_id","pubDialogVisible","pubForm","title","content","cover_img","pubFormRules","required","message","trigger","min","max","created","getCateListfn","getArticleListFn","methods","handleClose","done","confirmResult","$confirm","confirmButtonText","cancelButtonText","type","catch","err","showPubDialogFn","res","selCoverFn","$refs","iptFileRef","click","changeCoverFn","e","files","target","length","imgRef","setAttribute","url","URL","createObjectURL","pubFormRef","validateField","dialogCloseFn","resetFields","pubArticleFn","str","validate","valid","fd","FormData","append","code","$message","error","success","contentChangeFn"],"sources":["src/views/article/artList.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <el-card class=\"box-card\">\r\n      <div slot=\"header\" class=\"clearfix\">\r\n        <span>文章列表</span>\r\n      </div>\r\n      <!-- 搜索区域 -->\r\n      <div class=\"search-box\">\r\n        <el-form :inline=\"true\" :model=\"q\">\r\n          <el-form-item label=\"文章分类\">\r\n            <el-select v-model=\"q.cate_id\" placeholder=\"请选择分类\" size=\"small\">\r\n              <el-option v-for = \"obj in cateList\" :key=\"obj.id\" :label=\"obj.cate_name\" :value=\"obj.cate_id\"></el-option>\r\n            </el-select>\r\n          </el-form-item>\r\n          <el-form-item label=\"发布状态\" style=\"margin-left: 15px;\">\r\n            <el-select v-model=\"q.state\" placeholder=\"请选择状态\" size=\"small\">\r\n              <el-option label=\"已发布\" value=\"已发布\"></el-option>\r\n              <el-option label=\"草稿\" value=\"草稿\"></el-option>\r\n            </el-select>\r\n          </el-form-item>\r\n          <el-form-item>\r\n            <el-button type=\"primary\" size=\"small\">筛选</el-button>\r\n            <el-button type=\"info\" size=\"small\">重置</el-button>\r\n          </el-form-item>\r\n        </el-form>\r\n        <!-- 发表文章的按钮 -->\r\n        <el-button type=\"primary\" size=\"small\" class=\"btn-pub\" @click=\"showPubDialogFn\">发表文章</el-button>\r\n      </div>\r\n\r\n      <!-- 文章表格区域 -->\r\n      <el-table :data=\"artList\" style=\"width: 100%;\" border stripe>\r\n        <el-table-column label=\"文章标题\" prop=\"title\"></el-table-column>\r\n        <el-table-column label=\"分类\" prop=\"cate_name\"></el-table-column>\r\n        <el-table-column label=\"发表时间\" prop=\"pub_date\">\r\n          <template v-slot=\"scope\">\r\n            <span>{{ $formatDate(scope.row.pub_date) }}</span>\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column label=\"状态\" prop=\"state\"></el-table-column>\r\n        <el-table-column label=\"操作\"></el-table-column>\r\n      </el-table>\r\n      <!-- 分页区域 -->\r\n    </el-card>\r\n\r\n    <el-dialog title=\"发表文章\"\r\n    :visible.sync=\"pubDialogVisible\"\r\n    fullscreen\r\n    :before-close=\"handleClose\"\r\n    @close = \"dialogCloseFn\">\r\n      <!-- 发布文章的对话框 -->\r\n      <el-form :model=\"pubForm\" :rules=\"pubFormRules\" ref=\"pubFormRef\" label-width=\"100px\">\r\n        <el-form-item label=\"文章标题\" prop=\"title\">\r\n          <el-input v-model=\"pubForm.title\" placeholder=\"请输入标题\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"文章分类\" prop=\"cate_id\">\r\n          <el-select v-model=\"pubForm.cate_id\" placeholder=\"请选择分类\" style=\"width: 100%;\">\r\n            <el-option v-for = \"obj in cateList\" :key=\"obj.id\" :label=\"obj.cate_name\" :value=\"obj.id\"></el-option>\r\n          </el-select>\r\n        </el-form-item>\r\n        <el-form-item label=\"文章内容\" prop=\"content\">\r\n          <quill-editor v-model=\"pubForm.content\" @blur=\"contentChangeFn\"></quill-editor>\r\n        </el-form-item>\r\n        <el-form-item label=\"文章封面\" prop=\"cover_img\">\r\n          <!-- 用来显示封面的图片 -->\r\n          <img src=\"../../assets/images/cover.jpg\" alt=\"\" class=\"cover-img\" ref=\"imgRef\" />\r\n          <br />\r\n          <!-- 文件选择框，默认被隐藏 -->\r\n          <input type=\"file\" style=\"display: none;\" accept=\"image/*\" ref=\"iptFileRef\" @change=\"changeCoverFn\" />\r\n          <!-- 选择封面的按钮 -->\r\n          <el-button type=\"text\" @click=\"selCoverFn\">+ 选择封面</el-button>\r\n        </el-form-item>\r\n        <el-form-item>\r\n            <el-button type=\"primary\" @click=\"pubArticleFn('已发布')\">发布</el-button>\r\n            <el-button type=\"info\" @click=\"pubArticleFn('草稿')\">存为草稿</el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { getArtCateListAPI, uploadArticleAPI, getArtListAPI } from '@/api'\r\nimport imgObj from '../../assets/images/cover.jpg'\r\nexport default {\r\n  name: 'ArtList',\r\n  data () {\r\n    return {\r\n      state: '', // 值只能为已发布或者草稿\r\n      cateList: [], // 用来接收返回的文章分类列表\r\n      artList: [], // 用来接收返回的文章列表\r\n      total: 0, // 保存现有文章的总数\r\n      // 查询参数对象\r\n      q: {\r\n        pagenum: 1, // 请求的页数\r\n        pagesize: 10, // 每页的文章数量\r\n        cate_id: '',\r\n        state: ''\r\n      },\r\n      pubDialogVisible: false, // 控制发布文章对话框的出现/隐藏\r\n      pubForm: { // 发布文章-表单的数据对象\r\n        title: '',\r\n        cate_id: '',\r\n        content: '', // 保存文章内容\r\n        cover_img: null // 用户选择的封面图片（null 表示没有选择任何封面）\r\n      },\r\n      pubFormRules: { // 发布文章-表单的验证规则对象\r\n        title: [\r\n          { required: true, message: '请输入文章标题', trigger: 'blur' },\r\n          { min: 1, max: 30, message: '文章标题的长度为1-30个字符', trigger: 'blur' }\r\n        ],\r\n        cate_id: [{ required: true, message: '请选择文章标题', trigger: 'change' }],\r\n        content: [{ required: true, message: '请输入文章内容', trigger: 'blur' }],\r\n        cover_img: [{ required: true, message: '请选择文章封面', trigger: 'change' }]\r\n      }\r\n    }\r\n  },\r\n  created () {\r\n    this.getCateListfn()\r\n    this.getArticleListFn()\r\n  },\r\n  methods: {\r\n    // 发布文章的对话框,关闭前的回调\r\n    async handleClose (done) { // done的作用：调用就会关闭对话框\r\n      const confirmResult = await this.$confirm('此操作将导致文章信息丢失, 是否继续?', '提示', {\r\n        confirmButtonText: '确定',\r\n        cancelButtonText: '取消',\r\n        type: 'warning'\r\n      }).catch(err => err)\r\n      // 取消了关闭-阻止住, 什么都不干\r\n      if (confirmResult === 'cancel') return\r\n      // 确认关闭\r\n      done()\r\n    },\r\n    // 展示发布文章的对话框\r\n    showPubDialogFn () {\r\n      this.pubDialogVisible = true\r\n    },\r\n    // 得到文章分类列表\r\n    async getCateListfn () {\r\n      const { data: res } = await getArtCateListAPI()\r\n      this.cateList = res.data\r\n      // console.log(res)\r\n    },\r\n    // 选择封面点击事件，出现文件选择框\r\n    selCoverFn () {\r\n      this.$refs.iptFileRef.click()\r\n    },\r\n    // 前端预览用户选择的头像文件\r\n    changeCoverFn (e) {\r\n      const files = e.target.files\r\n      if (files.length === 0) {\r\n        // 用户没有选择封面\r\n        this.pubForm.cover_img = null\r\n        this.$refs.imgRef.setAttribute('src', imgObj)\r\n      } else {\r\n        // 用户选择了封面\r\n        this.pubForm.cover_img = files[0]\r\n        const url = URL.createObjectURL(files[0])\r\n        this.$refs.imgRef.setAttribute('src', url)\r\n      }\r\n      this.$refs.pubFormRef.validateField('cover_img')\r\n    },\r\n    // 新增文章后，对话框关闭后清空表单\r\n    dialogCloseFn () {\r\n      this.$refs.pubFormRef.resetFields()\r\n      // 给封面标签img重新设置一个值，因为没有受到v-model的影响\r\n      this.$refs.imgRef.setAttribute('src', imgObj)\r\n    },\r\n    // 表单里点击按钮事件，点击发布或存为草稿，准备调用后端接口\r\n    pubArticleFn (str) {\r\n      // str的值为已发布或草稿\r\n      this.pubForm.state = str\r\n      // console.log(this.pubForm)\r\n      // 兜底校验\r\n      this.$refs.pubFormRef.validate(async valid => {\r\n        if (valid) {\r\n          // 校验通过\r\n          const fd = new FormData()\r\n          fd.append('title', this.pubForm.title)\r\n          fd.append('cate_id', this.pubForm.cate_id)\r\n          fd.append('content', this.pubForm.content)\r\n          fd.append('cover_img', this.pubForm.cover_img)\r\n          fd.append('state', this.pubForm.state)\r\n          const { data: res } = await uploadArticleAPI(fd)\r\n          if (res.code !== 0) return this.$message.error('发布文章失败')\r\n          this.$message.success('发布文章成功')\r\n          // 关闭对话框\r\n          this.pubDialogVisible = false\r\n          this.getArticleListFn()\r\n        } else {\r\n          return false\r\n        }\r\n      })\r\n    },\r\n    // 富文本编辑器内容改变触发此事件方法\r\n    contentChangeFn () {\r\n      this.$refs.pubFormRef.validateField('content')\r\n    },\r\n    // 获取文章列表\r\n    async getArticleListFn () {\r\n      const { data: res } = await getArtListAPI(this.q)\r\n      this.artList = res.data\r\n      this.total = res.total\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n::v-deep .ql-editor {\r\n  min-height: 300px;\r\n}\r\n.search-box {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: flex-start;\r\n  .btn-pub {\r\n    margin-top: 5px;\r\n  }\r\n}\r\n.cover-img {\r\n  width: 400px;\r\n  height: 280px;\r\n  object-fit: cover;\r\n}\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}