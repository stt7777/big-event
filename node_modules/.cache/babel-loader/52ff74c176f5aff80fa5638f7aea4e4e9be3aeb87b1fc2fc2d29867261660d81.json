{"ast":null,"code":"// 基于axios封装网络请求的函数\nimport axios from 'axios';\nconst myAxios = axios.create({\n  baseURL: 'http://big-event-vue-api-t.itheima.net'\n});\n// 定义请求拦截器\n// 每次调用request都会先走这个请求拦截器\nmyAxios.interceptors.request.use(function (config) {\n  // 在请求前会触发一次\n  // 返回给axios内源码，\n  // config配置对象（要请求后台的参数都在这个对象上），根据配置项发起请求\n  return config;\n}, function (error) {\n  // 发起请求的代码，如果有异常就会进入到这里\n  // 返回一个拒绝状态的Promise对象\n  return Promise.reject(error);\n});\nexport default myAxios;","map":{"version":3,"names":["axios","myAxios","create","baseURL","interceptors","request","use","config","error","Promise","reject"],"sources":["D:/web ziliao/大事件项目/vue-event/src/utils/request.js"],"sourcesContent":["// 基于axios封装网络请求的函数\r\nimport axios from 'axios'\r\n\r\nconst myAxios = axios.create({\r\n  baseURL: 'http://big-event-vue-api-t.itheima.net'\r\n})\r\n// 定义请求拦截器\r\n// 每次调用request都会先走这个请求拦截器\r\nmyAxios.interceptors.request.use(function (config) {\r\n  // 在请求前会触发一次\r\n  // 返回给axios内源码，\r\n  // config配置对象（要请求后台的参数都在这个对象上），根据配置项发起请求\r\n  return config\r\n}, function (error) {\r\n  // 发起请求的代码，如果有异常就会进入到这里\r\n  // 返回一个拒绝状态的Promise对象\r\n  return Promise.reject(error)\r\n})\r\nexport default myAxios\r\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC3BC,OAAO,EAAE;AACX,CAAC,CAAC;AACF;AACA;AACAF,OAAO,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAAC,UAAUC,MAAM,EAAE;EACjD;EACA;EACA;EACA,OAAOA,MAAM;AACf,CAAC,EAAE,UAAUC,KAAK,EAAE;EAClB;EACA;EACA,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CAAC,CAAC;AACF,eAAeP,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}